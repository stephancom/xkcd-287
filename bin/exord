#!/usr/bin/env ruby

#       by stephan.com    _
#   _____  _____  _ __ __| |
#  / _ \ \/ / _ \| '__/ _` |
# |  __/>  < (_) | | | (_| |
#  \___/_/\_\___/|_|  \__,_|

# exord - for exact orders
# based on XKCD 287 - https://xkcd.com/287/
# in fulfillment of a programming challenge

require 'methadone'
require 'ruby-progressbar'
require 'pry'
require 'exord'

include Methadone::Main
include Methadone::CLILogging
include Exord

Money.locale_backend = :currency

main do |filename|
  total = 0
  menu = Menu.new(options[:restaurant])
  File.open(filename) do |f|
    total_string = f.readline
    total_string = options[:total] if options.key?(:total)
    total = Monetize.parse(total_string)
    menu.parse_lines(f)
  end

  puts menu.inspect
  puts "Desired total: #{total.format}"

  puts 'monto carlo method'
  progressbar = ProgressBar.create(total: nil, title: '$0.00', format: 'Attempt %c: %t |%B|')
  exactinator = Exactinator::MonteCarlo.new(menu, total)

  exactinator.run do |this_total|
    progressbar.increment
    progressbar.title = this_total.format
  end

  progressbar.finish

  puts 'success!'

  exactinator.orders.each do |order|
    puts order.inspect
  end
end

options[:restaurant] = 'Menu'

description 'Given an input file containing a target total and menu items, find all possible combinations of menu items that meet the total exactly'

on('-r VALUE', '--restaurant', 'name of restaurant')
on('-t VALUE', '--total', 'override total in the input file (don\'t forget to escape \$!)')
methods = %w[montecarlo]
on('-m VALUE', '--method', methods, 'possible methods to use', "(#{methods.join('|')})")

arg :filename, :required, 'input filename. first line must have target total, remaining lines each have a menu item name a price, separated by a comma'

version Exord::VERSION, compact: true

go!
